{
	"info": {
		"_postman_id": "fae1de82-b4df-4545-aab0-6c6b8a01a5fb",
		"name": "Airports",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12453070"
	},
	"item": [
		{
			"name": "Create Airport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"airport_id\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Name\",\n    \"code\": \"nam\",\n    \"country\": \"Colombia\",\n    \"city\": \"Pereira\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create invalid Airport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"   pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Name\",\n    \"code\": \"name\",\n    \"country\": \"Colombia\",\n    \"city\": \"Pereira\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Airports",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of airports > ' + 0, function () {",
							"   var data = pm.response.json()",
							"   pm.expect(data.length).to.greaterThan(0)",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Airport by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports/{{airport_id}}",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports",
						"{{airport_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Airport with unexisting id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The airport with id 536d6551-16b3-4ab6-91de-11810db724dc has not been found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports/536d6551-16b3-4ab6-91de-11810db724dc",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports",
						"536d6551-16b3-4ab6-91de-11810db724dc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Airport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Name\",\n    \"code\": \"nam\",\n    \"country\": \"Colombia\",\n    \"city\": \"Pereira\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports/{{airport_id}}",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports",
						"{{airport_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Airport with unexisting id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The airline with id e7884f54-069d-45a8-bebc-30c75ae457c3 has not been found\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Name\",\n    \"code\": \"nam\",\n    \"country\": \"Colombia\",\n    \"city\": \"Pereira\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports/e7884f54-069d-45a8-bebc-30c75ae457c3",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports",
						"e7884f54-069d-45a8-bebc-30c75ae457c3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Airpot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports/{{airport_id}}",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports",
						"{{airport_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Airline with unexisting id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The airport with id a504f410-a8be-44b4-bb07-89944bc9a082 has not been found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseProtocol}}://{{baseURL}}:{{basePort}}/api/{{apiVersion}}/airports/a504f410-a8be-44b4-bb07-89944bc9a082",
					"protocol": "{{baseProtocol}}",
					"host": [
						"{{baseURL}}"
					],
					"port": "{{basePort}}",
					"path": [
						"api",
						"{{apiVersion}}",
						"airports",
						"a504f410-a8be-44b4-bb07-89944bc9a082"
					]
				}
			},
			"response": []
		}
	]
}